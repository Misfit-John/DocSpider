# -*- coding:utf-8 -*-
import urllib
import urllib2
import re
import os
import urlparse
import sys,traceback
import sqlite3
import plistlib


class Spider:

  def __init__(self,root, docSetName):
    self.rootUrl = root
#don't sure about index page, are they the same?
    self.allClassUrl = self.rootUrl + 'allclasses-noframe.html'
    user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
    self.headers = { 'User-Agent' : user_agent }
    self.searchedUrl = set()
    self.docSetName = docSetName
    self.createPath('./%s.docset/Contents/Resources/docSet.dsidx' % docSetName)
    self.connection = sqlite3.connect('./%s.docset/Contents/Resources/docSet.dsidx' % docSetName)
    self.course = self.connection.cursor()
    self.course.execute('CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);')
    self.course.execute('CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path);')
    self.insertStr = '''INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES (?, ?, ?);'''

  def pullSummaryPage(self):
    summaryPage = self.rootUrl + 'overview-summary.html'
    summaryPageMsg = self.pullWeb(summaryPage)
    self.write2File(summaryPageMsg, summaryPage)
    packageRe = re.compile('<td class="colFirst"><a href="(.*?)">(.*?)</a></td>')
    allPackages = packageRe.findall(summaryPageMsg)
    for package in allPackages:
        packageRequest = urlparse.urljoin(summaryPage, package[0])
        packageMsg = self.pullWeb(packageRequest)
        packagePath = self.write2File(packageMsg, packageRequest)
        name = self.getClassName(packagePath)
        self.course.execute(self.insertStr, (name[0], "Package", packagePath))

    self.initPlist()
    self.tagDic = {
        'annotation':'Annotation',
        'nested.class':'Class',
        'class':'Class',
        'interface':'Interface',
        'enum':'Enum',
        'enum.constant':'Enum',
        'method':'Method',
        'constructor':'Constructor',
        'field':'Constant'

       }

  def __del__(self):
    self.connection.commit()
    self.connection.close()

  def initPlist(self):
    plistInfo = {
        "CFBundleIdentifier": "javadoc",
        "CFBundleName" : self.docSetName,
        "DocSetPlatformFamily": "javadoc",
        "dashIndexFilePath" : "overview-summary.html",
        "DashDocSetFamily" :"java",
        "isDashDocset": "YES"
        }
    plistlib.writePlist(plistInfo, './%s.docset/Contents/Info.plist' %self.docSetName)

  def pullWeb(self, url):
    try:
      if url in self.searchedUrl:
        return ""
      request = urllib2.Request(url,headers = self.headers)
      response = urllib2.urlopen(request)
      rspMsg = response.read()
      self.searchedUrl.add(url)
      return rspMsg
    except urllib2.URLError, e:
        if hasattr(e,"code"):
            print e.code
        if hasattr(e,"reason"):
            print e.reason
        return ""

  def createPath(self,file):
    dirPathRe = re.compile('(.*)/')
    docPath = dirPathRe.findall(file)
    for p in docPath:
      if os.path.exists(p) is not True :
          os.makedirs(p)
      return p
    return ""

  def write2File(self, msg, url):
    print "now save %s" % url
    fileName = url.replace(self.rootUrl, "./%s.docset/Contents/Resources/Documents/" % self.docSetName)
    path = self.createPath(fileName)
    fileHandler = open(fileName,'w')
    fileHandler.write(msg)
    return fileName.replace("./%s.docset/Contents/Resources/Documents/" % self.docSetName,"")

  def getClassName(self, url):
    docSetNameReg = re.compile('(.*)\.html')
    allClass = docSetNameReg.findall(url)
    for path in allClass:
      splited = path.split('/')
      return ".".join(splited), splited[-1]
    return "", ""


  def getTypeName(self, javaTag):
    if javaTag in self.tagDic:
      return self.tagDic[javaTag]
    else:
      print "unexpected tag:%s"%javaTag
      return javaTag[0].capitalize() + javaTag[:1]
    
  def run(self):
    try:
        #find the doc version
        versionReg = re.compile('<!-- Generated by javadoc \((.*?)\)')

        rspMsg = self.pullWeb(self.allClassUrl)
        # also save method list
        self.write2File(rspMsg, self.allClassUrl)
        versionMatch = versionReg.findall(rspMsg)

        # I don't care if this is a doc or not, just get the first one, if nothing exist, panic will rasie    
        version = versionMatch[0]
        #find the classes and interfaces, also find the href
        print "The doc version is " + version
        self.pullSummaryPage()

        classReg = re.compile('<li><a href="(.*)".*?title="(.*?) in .*?"')
        allClass = classReg.findall(rspMsg)

        csPathRe = re.compile('href="(\..*?\.css)"')
        pageReg = re.compile('<span class="memberNameLink"><a href="(.*?#.*?)">(.*?)</a></span>')
        allSummaryReg = re.compile('<div class="summary">.*?<a name="(.*?)\.summary">(.*?)</ul>', re.S)
        for cur in allClass:
          self.connection.commit()
          requestUrl = self.rootUrl + cur[0]
          classMsg = self.pullWeb(requestUrl)
          #save classes
          fileName = self.write2File(classMsg, requestUrl)
          classNameA, classNameB = self.getClassName(fileName)

          typeName = self.getTypeName(cur[1])
          self.course.execute(self.insertStr, (classNameA, typeName, fileName))
          self.course.execute(self.insertStr, (classNameB, typeName, fileName))

          #find all method in this file and insert into the db
          methodSummary = allSummaryReg.findall(classMsg)
          for method in methodSummary:
            #find field summary at first
            memberFields = pageReg.findall(method[1])
            fieldType = self.getTypeName(method[0])
            for field in memberFields:
              methodIndex = urlparse.urljoin(fileName, field[0])
              self.course.execute(self.insertStr, (field[1], fieldType, methodIndex))
          csFile = csPathRe.findall(classMsg)
          for files in csFile:
            downloadPath = urlparse.urljoin(self.rootUrl + cur[0],  files)
            cssFile = self.pullWeb(downloadPath)
            if cssFile != "":
              self.write2File(cssFile, downloadPath)
    except:
        tb = traceback.format_exc()
        print(tb)
        

if __name__ == "__main__":
  rootUrl = 'http://api.mongodb.com/java/current/'
  spider = Spider(rootUrl, "JavaMongo")
  spider.run()

